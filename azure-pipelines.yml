trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  API_URL: 'http://139.59.40.74:5000'
  API_AUTH_ENDPOINT: '/users/v1/login' 
  API_AUTH_USERNAME: 'admin'
  API_AUTH_PASSWORD: 'pass1' 
  AKTO_DASHBOARD_URL: 'http://139.59.40.74:9090'
  AKTO_API_KEY: 'QHX65uzAoLZ9M33USJe1zbMD7IxzkGeeft49cO4d'
  AKTO_TESTING_RUNHEXA_ID: '66580ac8d32ba320db8d82bd'
  AUTH_TOKEN: ' '

stages:
  - stage: API_Security_Scanning
    jobs:
      - job: OWASP_ZAP
        condition: succeeded()
        displayName: 'OWASP Zap'
        steps:
          - script: |
              AUTH_RESPONSE=$(curl -s -X POST "$(API_URL)$API_AUTH_ENDPOINT" -H "Content-Type: application/json" -d '{"username":"admin", "password":"pass1"}')
              AUTH_TOKEN=$(echo $AUTH_RESPONSE | jq -r '.auth_token')
              echo "Retrieved Auth Token: $AUTH_TOKEN"
              echo "##vso[task.setvariable variable=AUTH_TOKEN]$AUTH_TOKEN"
            displayName: 'Retrieve Auth Token from OpenAPI'
          
          - script: |
              sudo chmod -R 777 $(System.DefaultWorkingDirectory)
              docker run  --rm  --network host -v $(System.DefaultWorkingDirectory):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-api-scan.py \
                -O $(API_URL) \
                -I -t /zap/wrk/openapi_specs/openapi3.yml \
                -f openapi \
                -r zap_report.html \
                -J zap_results.json \
                -z "-config replacer.full_list(0).description=auth_header \
                -config replacer.full_list(0).enabled=true \
                -config replacer.full_list(0).matchtype=REQ_HEADER \
                -config replacer.full_list(0).matchstr=Authorization \
                -config replacer.full_list(0).regex=false \
                -config replacer.full_list(0).replacement=Bearer $(AUTH_TOKEN)" 
            displayName: 'Run ZAP API Scan with OpenAPI and Auth'

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(System.DefaultWorkingDirectory)/zap_results.json'
              artifactName: 'ZapResults'
          
          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(System.DefaultWorkingDirectory)/zap_report.html'
              artifactName: 'ZapHtmlReport'

      - job: Akto
        displayName: 'Akto'
        condition: succeeded()
        steps:
          - script: |
              curl $(AKTO_DASHBOARD_URL)/api/startTest -H 'X-API-KEY: $(AKTO_API_KEY)' -H 'content-type: application/json' -d '{"testingRunHexId": "$(AKTO_TESTING_RUNHEXA_ID)", "startTimestamp" : 0, "metadata": {"platform": "Azure DevOps"}}'
            displayName: 'Trigger the Akto API Scan'
      
      - job: 'wallarm'
        displayName: 'wallarm'
        condition: succeeded()
        steps:
          - script: |
              docker run --rm --network="host" -v $(System.DefaultWorkingDirectory)/reports:/app/reports -v $(System.DefaultWorkingDirectory)/openapi3.yml:/app/openapi3.yml wallarm/gotestwaf --url $(API_URL)  --openapiFile /app/openapi3.yml --noEmailReport 
            displayName: 'Trigger the wallarm API Scan'

      - job: 'deduplication'
        displayName: 'aggregation and deduplication'
        dependsOn:
          - wallarm
          - Akto
          - OWASP_ZAP
        steps:
          - script: |
             echo 'hello'
        